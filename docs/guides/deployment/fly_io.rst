.. _ref_guide_deployment_fly_io:

=========
On Fly.io
=========

In this guide we show how to deploy EdgeDB to Fly.io using a Fly.io
PostgreSQL cluster as the backend.


Prerequisites
=============

* Fly.io account
* ``flyctl`` CLI (`install <flyctl-install_>`_)

.. _flyctl-install: https://fly.io/docs/getting-started/installing-flyctl/


Provision an EdgeDB instance
============================

Every Fly.io app must have a globally unique name, including service VMs like
Postgres and EdgeDB.  Here we assume the name for the EdgeDB app is
"myorg-edgedb", which you would need to replace with a name of your choosing.

.. code-block:: bash

    $ cat << EOF > fly.toml
    [env]
    EDGEDB_SERVER_BACKEND_DSN_ENV = "DATABASE_URL"
    EDGEDB_SERVER_BIND_ADDRESS = "::"
    EOF

    $ flyctl launch --no-deploy --image=edgedb/edgedb:1-rc2 --name=myorg-edgedb
    An existing fly.toml file was found
    ? Would you like to copy its configuration to the new app? (y/N) y
    Creating app in /home/elvis/dev/edgedb/edgedb-deploy/fly-io
    Using image edgedb/edgedb:nightly
    Selected App Name: myorg-edgedb
    ...
    Created app myorg-edgedb in organization personal
    Wrote config file fly.toml

To simplify the initial deployment, let's instruct EdgeDB to run in insecure
mode (with password authentication off and an autogenerated TLS certificate).
We will secure the instance once things are up and running.

.. code-block:: bash

    $ flyctl secrets set \
        EDGEDB_SERVER_SECURITY="insecure_dev_mode" \
        -a myorg-edgedb

EdgeDB requires a little bit more than the default Fly.io VM side provides, so
we need to make sure to resize the VM.

.. code-block:: bash

    $ flyctl scale vm dedicated-cpu-1x --app=myorg-edgedb
    Scaled VM Type to
     dedicated-cpu-1x
          CPU Cores: 1
             Memory: 2 GB


Create a PostgreSQL cluster
===========================

Now we need to provision a PostgreSQL cluster and attach it to the EdgeDB app.

.. note::

  If you have an existing PostgreSQL cluster in your Fly.io organization,
  you can skip to the attachment step.

Create a new PostgreSQL cluster:

.. code-block:: bash

    $ flyctl pg create --name myorg-postgres --vm-size dedicated-cpu-1x
    ? Select VM size: dedicated-cpu-1x - 256
    ? Volume size (GB): 10
    Creating postgres cluster edgedb-pg in organization personal
    Postgres cluster edgedb-pg created
    ...
    --> v0 deployed successfully

Attach the PostgreSQL cluster to the EdgeDB app:

    $ flyctl pg attach --postgres-app myorg-postgres --app myorg-edgedb
    Postgres cluster myorg-postgres is now attached to myorg-edgedb
    The following secret was added to myorg-edgedb:
      DATABASE_URL=postgres://

When you deploy EdgeDB it will now automatically recognize which PostgreSQL
cluster to run on (via the ``EDGEDB_SERVER_BACKEND_DSN_ENV = "DATABASE_URL"``
bit).


Start EdgeDB
============

Everything is set, time to start EdgeDB:

.. code-block:: bash

    $ flyctl deploy --app=myorg-edgedb
    ...
    1 desired, 1 placed, 1 healthy, 0 unhealthy
    --> v0 deployed successfully

That's it!  You can now start using the EdgeDB instance located at
edgedb://myorg-edgedb.internal/ in your Fly.io apps.

.. note::

   If deploy did not succeed, make sure you've scaled the EdgeDB VM
   appropriately and check the logs (``flyctl logs myorg-edgedb``).


Create a local link to the new EdgeDB instance
==============================================

To access the EdgeDB instance you've just provisioned on Fly.io from your
local machine first make sure you have the `Private Network VPN`_ up and
running and then run ``edgedb instance link``:

.. code-block:: bash

   $ edgedb instance link \
        --trust-tls-cert \
        --host myorg-edgedb.internal \
        --non-interactive \
        fly

Don't forget to replace ``myorg-edgedb`` above with the name of your EdgeDB
app.  You can now use the EdgeDB instance deployed on Fly.io as ``fly``,
for example:

.. code-block:: bash

   $ edgedb -I fly
   edgedb>

.. _Private Network VPN: https://fly.io/docs/reference/privatenetwork/#private-network-vpn


Securing the EdgeDB instance
============================

Once the initial setup is done and everything is working it is time to secure
the EdgeDB instance.  We assume that you've created a local EdgeDB instance
link as instructed above.

First, let's specify the superuser password:

.. code-block:: bash

   $ edgedb -I fly query "alter role edgedb set password := <password>"

Second, let's persist the server-generated TLS certificate as a secret:

.. code-block:: bash

   $ flyctl ssh console

Now, let's turn off ``insecure_dev_mode``:

.. code-block:: bash

    $ flyctl secrets set \
        EDGEDB_SERVER_SECURITY="strict" \
        -a myorg-edgedb

If you wish, you can now re-link the ``fly`` instance to persist the password
in a local credentials file:

   $ edgedb instance link \
        --trust-tls-cert \
        --host myorg-edgedb.internal \
        --overwrite \
        --password \
        fly
